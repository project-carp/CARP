apply plugin: 'spring-boot'
apply plugin: 'com.moowork.node'

buildscript {

    dependencies {
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "${springBootVersion}"
        classpath group: 'org.springframework', name: 'springloaded', version: "${springLoadedVersion}"

        classpath group: 'com.moowork.gradle', name: 'gradle-node-plugin', version: '0.12'
    }

}

dependencies {
    compile project(":carp-common")
    compile project(":carp-backend")

    // Spring Boot's Starters
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: "${springBootVersion}"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: "${springBootVersion}"

    compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: "${springBootVersion}"

    // Security
    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.0.10.RELEASE'

    // Test dependencies
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"
    testCompile group: 'com.github.fakemongo', name: 'fongo', version: '2.0.7'
    testCompile group: 'com.lordofthejars', name: 'nosqlunit-mongodb', version: '0.9.0'
}

// Specific configuration for the Spring Loaded hot swap features
idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

build {
    dependsOn("npmInstall")
}

bootRun {
    dependsOn("npmInstall")
    dependsOn("tsc")
    systemProperties = System.properties

    main = 'pl.carp.webapp.CarpApplication'
}

node {
    nodeModulesDir = file("src/main/resources/static/")
}

task tscw(type: NpmTask) {
    args = ['run', 'tscw']
    workingDir = file("src/main/resources/static/")
}

task tsc(type: NpmTask) {
    args = ['run', 'tsc']
    workingDir = file("src/main/resources/static/")
}

task runFrontend(dependsOn: [npmInstall, tscw]) {}

task cleanAngular(type: Delete) {
    delete "src/main/resources/static/typings/"
    delete "src/main/resources/static/node_modules/"
}

task stage {
    dependsOn("npmInstall")
    dependsOn("tsc")
}